generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Image {
  id            String   @id @default(uuid())
  name          String
  url           String
  size          BigInt
  created_time  DateTime @default(now())
  video_id      String?
  baseinfo_id   String?
  blogpost_id   String?
  project_id    String?
  chat_id       String?
  shuoshuo_id   String?
  blogimages_id String?
  sharefile_id  String?
}

model Video {
  id           String   @id @default(uuid())
  name         String
  url          String
  size         BigInt
  duration     BigInt
  created_time DateTime @default(now())
  //  post         Image?
  chat_id      String?
  shuoshuo_id  String?
  sharefile_id String?
}

model BaseInfo {
  id                 String   @id @default(uuid())
  name               String
  start_time         DateTime @default(now())
  blogs_count        Int      @default(0)
  comments_count     Int      @default(0)
  visits_count       Int      @default(0)
  last_modified_time DateTime @default(now())
  //  head_image         Image?
}

model Root {
  id       String @id @default(uuid())
  account  String
  password String
  email    String
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String
  created_time  DateTime @default(now())
  is_banned     Boolean  @default(false)
  is_subscribed Boolean  @default(false)
  //  userVisit     UserVisit[]
  //  Comment       Comment[]
  //  pays           Pay[]
  //  chats         Chat[]
}

model UserVisit {
  id         String   @id @default(uuid())
  ip         String
  user_agent String
  visit_time DateTime @default(now())
  user_id    String?
}

model Comment {
  id           String   @id @default(uuid())
  comment      String
  created_time DateTime @default(now())
  user_id      String?
  blog_id      String?
  shuoshuo_id  String?
  personal_id  String?
}

model Blog {
  id                 String   @id @default(uuid())
  title              String
  content            String
  type               String
  created_time       DateTime @default(now())
  last_modified_time DateTime @default(now())
  visited_count      Int      @default(0)
  comments_count     Int      @default(0)
  pays_count         Int      @default(0)
  //  post               Image?    @relation("blogPost")
  //  images             Image[]   @relation("blogImages")
  //  comments           Comment[]
  //  pays Pay[]
}

model Shuoshuo {
  id                 String   @id @default(uuid())
  //  comments           Comment[]
  //  images             Image[]
  //  video              Video?
  media_type         String //image/video/text
  content            String?
  created_time       DateTime @default(now())
  last_modified_time DateTime @default(now())
  visited_count      Int      @default(0)
  comments_count     Int      @default(0)
}

model Pay {
  id           String   @id @default(uuid())
  type         String //blog/personal
  money        Float    @default(0.0)
  order_id     String   @default(uuid())
  order_url    String
  created_time DateTime @default(now())
  close_time   DateTime @default(now())
  pay_success  Boolean  @default(false)
  is_close     Boolean  @default(false)
  pay_type     String //wechat/alipay
  user_id      String
  blog_id      String
}

model File {
  id           String   @id @default(uuid())
  name         String
  size         BigInt
  url          String
  created_time DateTime @default(now())
  chat_id      String?
  sharefile_id String?
}

model ShareFile {
  id             String   @id @default(uuid())
  type           String
  media_class    String //images/videos/files
  created_time   DateTime @default(now())
  download_count Int      @default(0)
}

model Github {
  id                 String   @id @default(uuid())
  readme             String
  page_url           String
  title              String
  description        String
  created_time       DateTime
  last_modified_time DateTime
  languages          String
  stars_count        Int
  forks_count        Int
  watchers_count     Int
}

model Todolist {
  id           String    @id @default(uuid())
  title        String
  created_time DateTime  @default(now())
  is_done      Boolean   @default(false)
  is_done_time DateTime?
}

model Personal {
  id                  String   @id @default(uuid())
  name                String
  sex                 String
  birthday            DateTime
  wechat              String
  qq                  String
  github              String
  university          String
  university_end_time DateTime
  home                String
  readme              String
  //  comments            Comment[]
}

model Experience {
  id          String   @id @default(uuid())
  company     String
  duty        String
  description String
  time_start  DateTime
  time_end    DateTime
}

model Project {
  id          String   @id @default(uuid())
  name        String
  duty        String
  description String
  time_start  DateTime
  time_end    DateTime
  github_url  String?
  demo_url    String?
  //  image       Image?
}

model Chat {
  id           String   @id @default(uuid())
  ip           String
  location     String
  user_id      String
  created_time DateTime
  content      String?
  //  image        Image?
  //  video        Video?
  //  file         File?
  type         String //image/video/file/text
}
