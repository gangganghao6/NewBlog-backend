generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Image {
  id           String      @id @default(uuid())
  name         String
  url          String
  compressUrl  String?
  size         BigInt
  createdTime  DateTime    @default(now())
  fileSuffix   String?
  fileType     String?
  mediaType    String?
  originalName String?
  videoId      String?     @unique
  video        Video?      @relation(fields: [videoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  blogPostId   String?     @unique
  blogPost     Blog?       @relation(fields: [blogPostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // blogImagesId String?
  // blogImages   Blog?       @relation("blogImages", fields: [blogImagesId], references: [id])
  projectId    String?
  project      Project?    @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  experienceId String?
  experience   Experience? @relation(fields: [experienceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatId       String?     @unique
  chat         Chat?       @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  shuoshuoId   String?
  shuoshuo     Shuoshuo?   @relation(fields: [shuoshuoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  shareFileId  String?     @unique
  shareFile    ShareFile?  @relation(fields: [shareFileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rootId       String?     @unique
  root         Root?       @relation(fields: [rootId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  baseInfoId   String?     @unique
  baseInfo     BaseInfo?   @relation(fields: [baseInfoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Video {
  id           String     @id @default(uuid())
  name         String
  url          String
  size         BigInt
  duration     Float
  originalName String?
  mediaType    String?
  fileSuffix   String?
  fileType     String?
  createdTime  DateTime   @default(now())
  post         Image?
  chatId       String?    @unique
  chat         Chat?      @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  shuoshuoId   String?
  shuoshuo     Shuoshuo?  @relation(fields: [shuoshuoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  shareFileId  String?    @unique
  shareFile    ShareFile? @relation(fields: [shareFileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Root {
  id               String   @id @default(uuid())
  account          String
  password         String
  email            String
  name             String
  createdTime      DateTime @default(now())
  lastModifiedTime DateTime @default(now())
  lastLoginTime    DateTime @default(now())
  image            Image?
}

model User {
  id             String      @id @default(uuid())
  name           String
  email          String
  createdTime    DateTime    @default(now())
  lastActiveTime DateTime    @default(now())
  isBanned       Boolean     @default(false)
  isSubscribed   Boolean     @default(false)
  userVisits     UserVisit[]
  comments       Comment[]
  chats          Chat[]
  pays           Pay[]
}

model UserVisit {
  id              String   @id @default(uuid())
  ip              String
  country         String?
  province        String?
  city            String?
  isp             String?
  url             String
  userAgent       String
  browserName     String?
  browserVersion  String?
  browserMajor    String?
  engineName      String?
  engineVersion   String?
  osName          String?
  osVersion       String?
  deviceVendor    String?
  deviceModel     String?
  deviceType      String?
  cpuArchitecture String?
  visitTime       DateTime @default(now())
  userId          String?
  user            User?    @relation(fields: [userId], references: [id])
}

model Comment {
  id          String    @id @default(uuid())
  comment     String
  createdTime DateTime  @default(now())
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
  blogId      String?
  blog        Blog?     @relation(fields: [blogId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  shuoshuoId  String?
  shuoshuo    Shuoshuo? @relation(fields: [shuoshuoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  personalId  String?
  personal    Personal? @relation(fields: [personalId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Blog {
  id               String    @id @default(uuid())
  title            String
  content          String    @db.Text
  type             String
  createdTime      DateTime  @default(now())
  lastModifiedTime DateTime  @default(now())
  visitedCount     Int       @default(0)
  commentsCount    Int       @default(0)
  paysCount        Int       @default(0)
  post             Image?
  // images           Image[]   @relation("blogImages")
  comments         Comment[]
  pays             Pay[]
}

model Shuoshuo {
  id               String    @id @default(uuid())
  content          String?   @db.Text
  createdTime      DateTime  @default(now())
  lastModifiedTime DateTime  @default(now())
  visitedCount     Int       @default(0)
  commentsCount    Int       @default(0)
  images           Image[]
  videos           Video[]
  comments         Comment[]
}

model Pay {
  id          String    @id @default(uuid())
  message     String?
  payType     String //wechat/alipay
  money       Float     @default(0.0)
  orderId     String    @default(uuid())
  orderUrl    String    @db.Text
  createdTime DateTime  @default(now())
  closeTime   DateTime?
  paySuccess  Boolean   @default(false)
  isClose     Boolean   @default(false)
  userId      String
  user        User?     @relation(fields: [userId], references: [id])
  blogId      String?
  blog        Blog?     @relation(fields: [blogId], references: [id])
  personalId  String?
  personal    Personal? @relation(fields: [personalId], references: [id])
}

model File {
  id           String     @id @default(uuid())
  name         String
  size         BigInt
  url          String
  fileSuffix   String?
  fileType     String?
  mediaType    String?
  originalName String?
  createdTime  DateTime   @default(now())
  chatId       String?    @unique
  chat         Chat?      @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  shareFileId  String?    @unique
  shareFile    ShareFile? @relation(fields: [shareFileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ShareFile {
  id               String   @id @default(uuid())
  // type          String
  // mediaClass    String //images/videos/files
  name             String
  createdTime      DateTime @default(now())
  lastModifiedTime DateTime @default(now())
  downloadCount    Int      @default(0)
  file             File?
  video            Video?
  image            Image?
}

model Github {
  id               String   @id @default(uuid())
  pageUrl          String
  title            String
  description      String?
  createdTime      DateTime
  lastModifiedTime DateTime
  languages        String?
  starsCount       Int
  forksCount       Int
  watchersCount    Int
  visitedCount     Int      @default(0)
}

model Todolist {
  id          String    @id @default(uuid())
  title       String
  createdTime DateTime  @default(now())
  isDone      Boolean   @default(false)
  isDoneTime  DateTime?
}

model Personal {
  id                String    @id @default(uuid())
  name              String?
  sex               String?
  birthday          DateTime?
  wechat            String?
  qq                String?
  githubName        String?
  githubUrl         String?
  university        String?
  universityEndTime DateTime?
  home              String?
  content           String?   @db.Text
  visitedCount      Int       @default(0)
  createdTime       DateTime  @default(now())
  lastModifiedTime  DateTime  @default(now())
  pays              Pay[]
  comments          Comment[]
  // experiences       Experience[]
  // projects          Project[]
}

model Experience {
  id               String    @id @default(uuid())
  company          String
  duty             String
  description      String
  timeStart        DateTime
  timeEnd          DateTime?
  createdTime      DateTime  @default(now())
  lastModifiedTime DateTime  @default(now())
  // personalId  String
  // personal    Personal  @relation(fields: [personalId], references: [id])
  images           Image[]
}

model Project {
  id               String    @id @default(uuid())
  name             String
  duty             String
  description      String
  timeStart        DateTime
  timeEnd          DateTime?
  githubUrl        String?
  demoUrl          String?
  createdTime      DateTime  @default(now())
  lastModifiedTime DateTime  @default(now())
  // personalId  String
  // personal    Personal  @relation(fields: [personalId], references: [id])
  images           Image[]
}

model Chat {
  id          String   @id @default(uuid())
  ip          String
  location    String
  userId      String
  user        User?    @relation(fields: [userId], references: [id])
  createdTime DateTime @default(now())
  content     String?  @db.Text
  // media_class  String //image/video/file/text
  image       Image?
  video       Video?
  file        File?
}

model BaseInfo {
  id               String   @id @default(uuid())
  name             String?
  description      String?
  isAdminRegisted  Boolean  @default(false)
  createdTime      DateTime @default(now())
  lastModifiedTime DateTime @default(now())
  recommendBlogIds String?
  headImage        Image?
  visitedCount     Int      @default(0)
}
