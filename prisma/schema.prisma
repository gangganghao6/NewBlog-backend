generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Image {
  id           String      @id @default(uuid())
  name         String
  url          String
  size         BigInt
  createdTime  DateTime    @default(now())
  videoId      String?     @unique
  video        Video?      @relation(fields: [videoId], references: [id])
  blogPostId   String?     @unique
  blogPost     Blog?       @relation(fields: [blogPostId], references: [id])
  blogImagesId String?
  blogImages   Blog?       @relation("blogImages", fields: [blogImagesId], references: [id])
  projectId    String?
  project      Project?    @relation(fields: [projectId], references: [id])
  experienceId String?
  experience   Experience? @relation(fields: [experienceId], references: [id])
  chatId       String?     @unique
  chat         Chat?       @relation(fields: [chatId], references: [id])
  shuoshuoId   String?
  shuoshuo     Shuoshuo?   @relation(fields: [shuoshuoId], references: [id])
  shareFileId  String?
  shareFile    ShareFile?  @relation(fields: [shareFileId], references: [id])
}

model Video {
  id          String     @id @default(uuid())
  name        String
  url         String
  size        BigInt
  duration    BigInt
  createdTime DateTime   @default(now())
  post        Image?
  chatId      String?    @unique
  chat        Chat?      @relation(fields: [chatId], references: [id])
  shuoshuoId  String?
  shuoshuo    Shuoshuo?  @relation(fields: [shuoshuoId], references: [id])
  shareFileId String?
  shareFile   ShareFile? @relation(fields: [shareFileId], references: [id])
}

model Root {
  id       String @id @default(uuid())
  account  String
  password String
  email    String
}

model User {
  id           String      @id @default(uuid())
  name         String
  email        String
  createdTime  DateTime    @default(now())
  isBanned     Boolean     @default(false)
  isSubscribed Boolean     @default(false)
  userVisits   UserVisit[]
  comments     Comment[]
  chats        Chat[]
  pays         Pay[]
}

model UserVisit {
  id              String   @id @default(uuid())
  ip              String
  country         String?
  province        String?
  city            String?
  isp             String?
  url             String
  userAgent       String
  browserName     String?
  browserVersion  String?
  browserMajor    String?
  engineName      String?
  engineVersion   String?
  osName          String?
  osVersion       String?
  deviceVendor    String?
  deviceModel     String?
  deviceType      String?
  cpuArchitecture String?
  visitTime       DateTime @default(now())
  userId          String?
  user            User?    @relation(fields: [userId], references: [id])
}

model Comment {
  id          String    @id @default(uuid())
  comment     String
  createdTime DateTime  @default(now())
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
  blogId      String?
  blog        Blog?     @relation(fields: [blogId], references: [id])
  shuoshuoId  String?
  shuoshuo    Shuoshuo? @relation(fields: [shuoshuoId], references: [id])
  personalId  String?
  personal    Personal? @relation(fields: [personalId], references: [id])
}

model Blog {
  id               String    @id @default(uuid())
  title            String
  content          String
  type             String
  createdTime      DateTime  @default(now())
  lastModifiedTime DateTime  @default(now())
  visitedCount     Int       @default(0)
  commentsCount    Int       @default(0)
  paysCount        Int       @default(0)
  post             Image?
  images           Image[]   @relation("blogImages")
  comments         Comment[]
  pays             Pay[]
}

model Shuoshuo {
  id               String    @id @default(uuid())
  // media_class        String //images/videos/texts
  content          String?
  createdTime      DateTime  @default(now())
  lastModifiedTime DateTime  @default(now())
  visitedCount     Int       @default(0)
  commentsCount    Int       @default(0)
  images           Image[]
  videos           Video[]
  comments         Comment[]
}

model Pay {
  id          String    @id @default(uuid())
  // type        String //blog/personal
  payType     String //wechat/alipay
  money       Float     @default(0.0)
  orderId     String    @default(uuid())
  orderUrl    String
  createdTime DateTime  @default(now())
  closeTime   DateTime?
  paySuccess  Boolean   @default(false)
  isClose     Boolean   @default(false)
  userId      String    @unique
  user        User?     @relation(fields: [userId], references: [id])
  blogId      String?   @unique
  blog        Blog?     @relation(fields: [blogId], references: [id])
  personalId  String?   @unique
  personal    Personal? @relation(fields: [personalId], references: [id])
}

model File {
  id          String     @id @default(uuid())
  name        String
  size        BigInt
  url         String
  createdTime DateTime   @default(now())
  chatId      String?    @unique
  chat        Chat?      @relation(fields: [chatId], references: [id])
  shareFileId String?    @unique
  shareFile   ShareFile? @relation(fields: [shareFileId], references: [id])
}

model ShareFile {
  id            String   @id @default(uuid())
  type          String
  // mediaClass    String //images/videos/files
  createdTime   DateTime @default(now())
  downloadCount Int      @default(0)
  files         File[]
  videos        Video[]
  images        Image[]
}

model Github {
  id               String   @id @default(uuid())
  pageUrl          String
  title            String
  description      String?
  createdTime      DateTime
  lastModifiedTime DateTime
  languages        String?
  starsCount       Int
  forksCount       Int
  watchersCount    Int
  visitedCount     Int      @default(0)
}

model Todolist {
  id          String    @id @default(uuid())
  title       String
  createdTime DateTime  @default(now())
  isDone      Boolean   @default(false)
  isDoneTime  DateTime?
}

model Personal {
  id                String    @id @default(uuid())
  name              String?
  sex               String?
  birthday          DateTime?
  wechat            String?
  qq                String?
  githubName        String?
  githubUrl         String?
  university        String?
  universityEndTime DateTime?
  home              String?
  readme            String?
  visitedCount      Int       @default(0)
  pays              Pay[]
  comments          Comment[]
  // experiences       Experience[]
  // projects          Project[]
}

model Experience {
  id          String    @id @default(uuid())
  company     String
  duty        String
  description String
  timeStart   DateTime
  timeEnd     DateTime?
  // personalId  String
  // personal    Personal  @relation(fields: [personalId], references: [id])
  images      Image[]
}

model Project {
  id          String    @id @default(uuid())
  name        String
  duty        String
  description String
  timeStart   DateTime
  timeEnd     DateTime?
  githubUrl   String?
  demoUrl     String?
  // personalId  String
  // personal    Personal  @relation(fields: [personalId], references: [id])
  images      Image[]
}

model Chat {
  id          String   @id @default(uuid())
  ip          String
  location    String
  userId      String
  user        User?    @relation(fields: [userId], references: [id])
  createdTime DateTime @default(now())
  content     String?
  // media_class  String //image/video/file/text
  image       Image?
  video       Video?
  file        File?
}
